call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim'
Plug 'chriskempson/base16-vim'
Plug 'mhinz/vim-startify'
call plug#end()

"functions
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, '0') . ' ' . get(g:, 'coc_status', '')
endfunction

function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

"variables
let g:coc_status_error_sign = '»'
let g:coc_status_warning_sign = '›'
let g:ascii = [
      \ '            __',
      \ '    .--.--.|__|.--------.',
      \ '    |  |  ||  ||        |',
      \ '     \___/ |__||__|__|__|',
      \ '    '
      \]
let g:startify_custom_header = g:ascii
let g:startify_lists = [
        \ { 'type': 'files',     'header': ['    Most Recent Files']            },
        \ { 'type': 'dir',       'header': ['    Most Recent Files in '. getcwd()] },
        \ { 'type': function('s:gitModified'),  'header': ['    Modified Files In Git Repo']},
        \ { 'type': function('s:gitUntracked'), 'header': ['    Untracked Files In Git Repo']},
        \ ]
let g:startify_files_number=10
let g:fzf_tags_command = 'ctags -R'
let g:fzf_preview_window = []
let g:netrw_banner = 0

"configurations
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
syntax on

"visual mode bindings
xmap <silent>K  :move '<-2<CR>gv-gv
xmap <silent>J  :move '>+1<CR>gv-gv

"insert mode bindings
imap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"normal mode bindings
nmap <silent><Down>   :resize +2<CR>
nmap <silent><Up>     :resize -2<CR>
nmap <silent><Left>   :vertical resize +2<CR>
nmap <silent><Right>  :vertical resize -2<CR>
nmap <silent>J  <Plug>(coc-diagnostic-next)
nmap <silent>K  <Plug>(coc-diagnostic-prev)
nmap q  <NOP>
nmap Q  <NOP>
nmap H  gT
nmap L  gt
nmap <silent><leader>sex  :Sexplore<CR>
nmap <silent><leader>vex  :Vexplore<CR>
nmap <silent><leader>tex  :Texplore<CR>
nmap <silent><leader>exp  :Explore<CR>
nmap <silent><leader>hls  :set hlsearch!<CR>
nmap <silent><leader>def  <Plug>(coc-definition)
nmap <silent><leader>doc  :call<SID>show_documentation()<CR>
nmap <silent><leader>dia  :<C-u>CocList diagnostics<cr>
nmap <silent><leader>com  <Plug>(coc-git-commit)
nmap <silent><leader>lin  :Lines!<CR>
nmap <silent><leader>tag  :Tags!<CR>

"options
set nobackup
"set hidden
set nowritebackup
set noswapfile
set expandtab
set shiftround
set smarttab
set autoindent
"set list
set splitbelow
set nocp
set number relativenumber
set ignorecase
set smartcase
set incsearch
set autoread
set showmatch

"options' values
"set listchars=trail:⋅,space:⋅,eol:¬,tab:→\ ,extends:❯,precedes:❮
set cmdheight=2
set scrolloff=5
set clipboard=unnamed,unnamedplus
set tabstop=4
set softtabstop=4
set shiftwidth=4
set background=dark
set encoding=utf-8
set updatecount=0
set wildmode=list:longest,list:full
set t_Co=256
set t_ut=
set foldmethod=indent
set foldlevelstart=0
set foldnestmax=20
set foldlevel=1
set pastetoggle=<leader>p
set backspace=indent,eol,start
set laststatus=2
set guicursor=n-v-c-sm:block,i-ci-ve:block,r-cr-o:block
set guioptions-=T
set guioptions-=m
set guioptions-=r
set guifont=Ubuntu\ mono\ 12
set updatetime=100
set signcolumn=yes

"appearance
colorscheme base16-default-dark
hi clear SignColumn
hi clear LineNr
hi SignColumn guibg=bg ctermbg=bg
hi EndOfBuffer ctermfg=bg ctermbg=bg
highlight clear PmenuThumb
hi clear PmenuSbar
hi DiffAdd ctermbg=None ctermfg=White
hi DiffChange ctermbg=None ctermfg=White
hi DiffDelete ctermbg=None ctermfg=White
hi CocWarningSign ctermfg=White
hi CocErrorSign ctermfg=White
hi CocHintSign ctermfg=White


"statusline
"so $VIMRUNTIME/syntax/hitest.vim
set statusline +=%#ModeMsg#
set statusline +=\ %{mode()}
set statusline +=%#MoreMsg#
set statusline +=\ %B 
set statusline +=%#Directory#
set statusline +=\ %F 
set statusline +=%#WarningMsg#
set statusline +=\ %M
set statusline +=%#Character#
set statusline +=\ %R
set statusline +=%#Title#
set statusline +=%=
set statusline +=%#Identifier#
set statusline +=\ %v
set statusline +=%#Title#
set statusline +=\ %Y
set statusline +=%#Statement#
set statusline +=\ %{StatusDiagnostic()}
set statusline +=%#Conditional#
set statusline +=\ %{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
