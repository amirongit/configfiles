call plug#begin('~/.vim/plugged')
Plug 'ap/vim-css-color'
Plug 'Yggdroot/indentLine'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jaredgorski/spacecamp'
Plug 'nanotech/jellybeans.vim'
Plug 'mhinz/vim-startify'
Plug 'neoclide/coc.nvim'
Plug 'tomasiser/vim-code-dark'
Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'
Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

set nobackup
set nowritebackup
set cmdheight=2
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
nmap <silent><leader>def :call CocAction('jumpDefinition')<CR>
nmap <silent><leader>ref <Plug>(coc-references)
nnoremap <silent><leader>doc :call <SID>show_documentation()<CR>
nmap <silent><leader>act <Plug>(coc-codeaction)
nmap <silent><leader>ren <Plug>(coc-rename)
nmap <silent><leader>she  :CocCommand terminal.REPL<CR>
nmap <silent><leader>ter  <Plug>(coc-terminal-toggle)
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, '0') . ' ' . get(g:, 'coc_status', '')
endfunction
let g:coc_status_error_sign = 'E'
let g:coc_status_warning_sign = 'W'

" ['|', '¦', '┆', '┊']
let g:indentLine_char='┊'
" let g:indentLine_leadingSpaceEnabled=1
" let g:indentLine_leadingSpaceChar='·'


function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
let g:ascii = [
      \ '            __',
      \ '    .--.--.|__|.--------.',
      \ '    |  |  ||  ||        |',
      \ '     \___/ |__||__|__|__|',
      \ '    '
      \]
let g:startify_custom_header = g:ascii
let g:startify_lists = [
        \ { 'type': 'files',     'header': ['    Most Recent Files']            },
        \ { 'type': 'dir',       'header': ['    Most Recent Files in '. getcwd()] },
        \ { 'type': function('s:gitModified'),  'header': ['    Modified Files In Git Repo']},
        \ { 'type': function('s:gitUntracked'), 'header': ['    Untracked Files In Git Repo']},
        \ ]
let g:startify_files_number=5

nnoremap <silent><leader>his  :History!<CR>
nnoremap <silent><leader>gfi  :GFiles!<CR>
nnoremap <silent><leader>sta  :GFiles!?<CR>
nnoremap <silent><leader>lin  :Lines!<CR>
nnoremap <silent><leader>tag  :Tags!<CR>
nnoremap <silent><leader>com  :Commits!<CR>

xnoremap <silent>K          :move '<-2<CR>gv-gv
xnoremap <silent>J          :move '>+1<CR>gv-gv
nnoremap <silent><Down>   :resize +2<CR>
nnoremap <silent><Up>     :resize -2<CR>
nnoremap <silent><Left>   :vertical resize +2<CR>
nnoremap <silent><Right>  :vertical resize -2<CR>
nnoremap Q          <NOP>
nnoremap J          <NOP>
nnoremap K          <NOP>
nnoremap H          gT
nnoremap L          gt
nnoremap <silent><leader>rtl  :set rl!<CR>
nnoremap <silent><leader>ter  :tab term<CR>
nnoremap <silent><leader>sex  :Sexplore<CR>
nnoremap <silent><leader>vex  :Vexplore<CR>
nnoremap <silent><leader>tex  :Texplore<CR>
nnoremap <silent><leader>exp  :Explore<CR>
nnoremap <silent><leader>pas  :set paste<CR>
nnoremap <silent><leader>hls  :set hlsearch!<CR>
autocmd FileType python map <buffer> <leader>run  :w<CR>:exec '!clear && python' shellescape(@%, 1)<CR>
autocmd FileType javascript map <buffer> <leader>run  :w<CR>:exec '!clear && node' shellescape(@%, 1)<CR>
set listchars=eol:$,trail:⋅
set list
set number relativenumber
set scrolloff=3
set splitbelow
set nocp
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set background=dark
set ignorecase
set incsearch
set noswapfile
set encoding=utf-8
set t_Co=256
set foldmethod=indent
set nofoldenable
set noshowmode
set noshowcmd
set shortmess+=F
set laststatus=2
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guifont=mononoki\ 12
set guicursor=n-v-c-i:block-Cursor
set signcolumn=yes
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
syntax on
let g:dracula_colorterm = 0
let g:codedark_conservative = 1
let g:gruvbox_contrast_dark = 'hard'
colorscheme dracula
highlight clear SignColumn
highlight clear LineNr
highlight SignColumn guibg=bg


" so $VIMRUNTIME/syntax/hitest.vim
set statusline +=%#String#
set statusline +=\[%{mode()}]
set statusline +=\[%F]
set statusline +=\%r
set statusline +=\%m
set statusline +=%=
set statusline +=%#Title#
set statusline +=\[%v]
set statusline +=\[%Y]
set statusline +=\ %{StatusDiagnostic()}
set statusline +=\ %{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
