call plug#begin('~/.vim/plugged')
Plug 'ap/vim-css-color'
Plug 'Yggdroot/indentLine'
Plug 'wincent/terminus'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'chriskempson/base16-vim'
Plug 'jaredgorski/spacecamp'
Plug 'nanotech/jellybeans.vim'
Plug 'mhinz/vim-startify'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
" coc-extensions installed
" coc-git, python, jedi, css, fzf-preview, terminal

" coc.vim
" coc needs these settings
set nobackup
set nowritebackup
set cmdheight=2
" keymaps
" use tab to trigger auto complete
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" jump to defenition
nmap <leader>def :call CocAction('jumpDefinition')<CR>
" show refrence
nmap <leader>ref <Plug>(coc-references)
" show documentation
nnoremap <leader>doc :call <SID>show_documentation()<CR>
" run coc actions
nmap <leader>act <Plug>(coc-codeaction)
" rename a symbol
nmap <leader>ren <Plug>(coc-rename)
" run buffers code in vs terminal
nmap <leader>run  :CocCommand python.execInTerminal<CR>
" open a REPL
nmap <leader>she  :CocCommand terminal.REPL<CR>
" toggle terminal
nmap <leader>ter  <Plug>(coc-terminal-toggle)
" functions
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" needed for showing document keymap
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" get the linter's result in statusline
function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, '0') . ' ' . get(g:, 'coc_status', '')
endfunction
" variables
" customize error and warning signs
let g:coc_status_error_sign = 'E'
let g:coc_status_warning_sign = 'W' 
" customize git signs
" options
" show previews in bottom
set splitbelow

" TERMINUS
" variables
" disable cursor shape changing in modes (Terminus)
let g:TerminusCursorShape=0

" INDENTLINE
" variables
" indent guid char
let g:indentLine_char='┆'
" enable showing leading spaces
" let g:indentLine_leadingSpaceEnabled=1
" leading spaces char
" let g:indentLine_leadingSpaceChar='·'
" keymaps
" toggle indentline
nnoremap <leader>ind  :IndentLinesToggle<CR>

" FZF.VIM
" keymaps
" recently opened files
nnoremap <leader>his  :History!<CR>
" files tracking by git
nnoremap <leader>gfi  :GFiles!<CR>
" git status
nnoremap <leader>sta  :GFiles!?<CR>
" lines of all buffers
nnoremap <leader>lin  :Lines!<CR>
" tags
nnoremap <leader>tag  :Tags!<CR>
" commits
nnoremap <leader>com  :Commits!<CR>

" VIM-STARTIFY
" functions
" get modified files in git
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
" get untracked files in git
function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
" variables
" limit the number of shown files in startify
let g:startify_files_number = 4
" customizing startify's header
" let g:startify_custom_header = 'startify#pad(startify#fortune#quote())'
let g:ascii = [
      \ '           __',
      \ '   .--.--.|__|.--------.',
      \ '   |  |  ||  ||        |',
      \ '    \___/ |__||__|__|__|',
      \ '   '
      \]
let g:startify_custom_header = g:ascii
" startify appearance
let g:startify_lists = [
        \ { 'type': 'files',     'header': ['    Recent Files']            },
        \ { 'type': function('s:gitModified'),  'header': ['    Git Modified Files ']},
        \ { 'type': function('s:gitUntracked'), 'header': ['    Git Untracked Files']},
        \ ]

" GLOBAL
" keymaps
" swap selected lines above or under
xnoremap K          :move '<-2<CR>gv-gv
xnoremap J          :move '>+1<CR>gv-gv
" resize windows
nnoremap <Down>   :resize +2<CR>
nnoremap <Up>     :resize -2<CR>
nnoremap <Left>   :vertical resize +2<CR>
nnoremap <Right>  :vertical resize -2<CR>
" disable these keys
nnoremap Q          <NOP>
nnoremap J          <NOP>
nnoremap K          <NOP>
" move to left or right tab
nnoremap H          gT
nnoremap L          gt
" toggle rtl mode
nnoremap <leader>rtl  :set rl!<CR>
" file explorer in horizental split
nnoremap <leader>sex  :Sexplore<CR>
" file explorer in vertical split
nnoremap <leader>vex  :Vexplore<CR>
" file explorer in new tab
nnoremap <leader>tex  :Texplore<CR>
" file explorer in active window
nnoremap <leader>exp  :Explore<CR>
" opened files history
nnoremap <leader>pas  :set paste<CR>
" toggle searching highlight
nnoremap <leader>hls  :set hlsearch!<CR>
" options
" relative line numbers
set number relativenumber
" always show the 3 lines bottom of cursor
set scrolloff=3
" activate vim options
set nocp
" set soft tabs to be 4 spaces
set tabstop=4
" convert my tabs to spaces
set expandtab
" I am once again asking for my tabs to be 4 spaces
set softtabstop=4
" set indents to be 4 spaces
set shiftwidth=4
" this is required by some colorschemes to be dark
set background=dark
" ignore case sensetivity when searching
set ignorecase
" highlight when I start searching
set incsearch
" Avoid swap files
set noswapfile
" encoding method
set encoding=utf-8
" force vim to use 256 based colors
set t_Co=256
" enable code folding
set foldmethod=indent
" set vim to fold only 2 levels of indents
" set foldnestmax=2
" disable folding when I open vim
set nofoldenable
" force status bar to show
set laststatus=2
"disable menu bar
set guioptions-=m
"disable toolbar
set guioptions-=T
"disable scrollbar
set guioptions-=r
" merge sign column and number column
set signcolumn=number
" colors
" enable syntax highlighting
syntax on
" necessery for base256 colorschemes
let base16colorspace=256
" setting colorscheme
colorscheme jellybeans
" same bg color for signcolumn
highlight SignColumn ctermbg=bg
" when openning a file, go to the same line where I left
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" STATUSBAR
" so $VIMRUNTIME/syntax/hitest.vim
" run above command and choose a color from the generated file
set statusline +=%#String#
" mode
set statusline +=\[%{mode()}]
" file path
set statusline +=\[%F]
" readonly flag
set statusline +=\%r
" modified flag
set statusline +=\%m
" second half (right side)
set statusline +=%=
" second half color
set statusline +=%#Title#
" column number
set statusline +=\[%v]
" file type
set statusline +=\[%Y]
" linters status
set statusline +=[%{StatusDiagnostic()}]
" git status
set statusline +=[%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}]
